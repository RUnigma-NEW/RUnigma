--- linux-sh4-2.6.32.61_stm24_0212_orig/drivers/stm/gpio.c.orig
+++ linux-sh4/drivers/stm/gpio.c
@@ -27,13 +27,16 @@
 #include <linux/stm/platform.h>
 #include <linux/stm/pad.h>
 #include <linux/stm/pio.h>
-#include <linux/stm/pm_sys.h>
+#ifdef CONFIG_PROC_FS
+#include <linux/proc_fs.h>
+#include <linux/kallsyms.h>
+#endif
 #include "reg_pio.h"
 
 
-
 struct stpio_pin {
 #ifdef CONFIG_STPIO
+	const char *pin_name;
 	void (*func)(struct stpio_pin *pin, void *dev);
 	void* dev;
 	unsigned short port_no, pin_no;
@@ -42,58 +45,17 @@
 
 struct stm_gpio_pin {
 	unsigned char flags;
-#define PIN_FAKE_EDGE		4
+#define PIN_FAKE_EDGE			4
 #define PIN_IGNORE_EDGE_FLAG	2
 #define PIN_IGNORE_EDGE_VAL	1
 #define PIN_IGNORE_RISING_EDGE	(PIN_IGNORE_EDGE_FLAG | 0)
 #define PIN_IGNORE_FALLING_EDGE	(PIN_IGNORE_EDGE_FLAG | 1)
 #define PIN_IGNORE_EDGE_MASK	(PIN_IGNORE_EDGE_FLAG | PIN_IGNORE_EDGE_VAL)
 
-#ifdef CONFIG_HIBERNATION
-	unsigned char pm_saved_data;
-#endif
+	unsigned char direction;
 	struct stpio_pin stpio;
 };
 
-#ifdef CONFIG_HIBERNATION
-#define GPIO_DIR_MASK  0x7f
-#define GPIO_VAL_MASK  0x80
-static inline void gpio_pm_set_direction(struct stm_gpio_pin *pin,
-	unsigned int dir)
-{
-	pin->pm_saved_data &= ~GPIO_DIR_MASK;
-	pin->pm_saved_data |= dir & GPIO_DIR_MASK;
-}
-
-static inline unsigned char gpio_pm_get_direction(struct stm_gpio_pin *pin)
-{
-	return pin->pm_saved_data & GPIO_DIR_MASK;
-}
-
-static inline void gpio_pm_set_value(struct stm_gpio_pin *pin, int val)
-{
-	pin->pm_saved_data &= ~GPIO_VAL_MASK;
-	pin->pm_saved_data |= (val ? GPIO_VAL_MASK : 0);
-}
-
-static inline int gpio_pm_get_value(struct stm_gpio_pin *pin)
-{
-	return (pin->pm_saved_data & GPIO_VAL_MASK) ? 1 : 0;
-}
-#else
-static inline void gpio_pm_set_direction(struct stm_gpio_pin *pin,
-	unsigned int dir)
-{
-	return;
-}
-
-static inline void gpio_pm_set_value(struct stm_gpio_pin *pin, int val)
-{
-	return;
-}
-
-#endif
-
 #define to_stm_gpio_port(chip) \
 		container_of(chip, struct stm_gpio_port, gpio_chip)
 
@@ -105,6 +67,8 @@
 	void *base;
 	unsigned long irq_level_mask;
 	struct stm_gpio_pin pins[STM_GPIO_PINS_PER_PORT];
+	struct sys_device sysdev;
+	pm_message_t pm_state;
 };
 
 struct stm_gpio_irqmux {
@@ -112,7 +76,7 @@
 	int port_first;
 };
 
-
+static struct sysdev_class stm_gpio_sysdev_class;
 
 
 int stm_gpio_num; /* Number of available internal PIOs (pins) */
@@ -374,7 +338,6 @@
 static inline void __stm_gpio_set(struct stm_gpio_port *port, unsigned offset,
 		int value)
 {
-	gpio_pm_set_value(&port->pins[offset], value);
 	if (value)
 		set__PIO_SET_POUT__SET_POUT__SET(port->base, offset);
 	else
@@ -390,8 +353,11 @@
 			direction != STM_GPIO_DIRECTION_ALT_OUT &&
 			direction != STM_GPIO_DIRECTION_ALT_BIDIR);
 
-	gpio_pm_set_direction(&port->pins[offset], direction);
+	port->pins[offset].direction = direction;
 	set__PIO_PCx(port->base, offset, direction);
+
+	if (!port->pins[offset].stpio.pin_name)
+		port->pins[offset].stpio.pin_name = "-----";
 }
 
 
@@ -424,7 +390,11 @@
 
 static int stm_gpio_direction_input(struct gpio_chip *chip, unsigned offset)
 {
-	stm_pad_configure_gpio(chip->base + offset, STM_GPIO_DIRECTION_IN);
+	struct stm_gpio_port *port = to_stm_gpio_port(chip);
+
+	set__PIO_PCx__INPUT_HIGH_IMPEDANCE(port->base, offset);
+	if (!port->pins[offset].stpio.pin_name)
+		port->pins[offset].stpio.pin_name = "-----";
 
 	return 0;
 }
@@ -436,7 +406,9 @@
 
 	__stm_gpio_set(port, offset, value);
 
-	stm_pad_configure_gpio(chip->base + offset, STM_GPIO_DIRECTION_OUT);
+	set__PIO_PCx__OUTPUT_PUSH_PULL(port->base, offset);
+	if (!port->pins[offset].stpio.pin_name)
+		port->pins[offset].stpio.pin_name = "-----";
 
 	return 0;
 }
@@ -503,13 +475,17 @@
 
 	gpio_pin->stpio.port_no = port_no;
 	gpio_pin->stpio.pin_no = pin_no;
-
+	gpio_pin->stpio.pin_name = (name==NULL)?"-----":name;
 	return &gpio_pin->stpio;
 }
 EXPORT_SYMBOL(__stpio_request_pin);
 
 void stpio_free_pin(struct stpio_pin *pin)
 {
+	stpio_configure_pin(pin, STPIO_IN);
+	pin->pin_name = NULL;
+	pin->func = 0;
+	pin->dev = 0;
 	stm_pad_release_gpio(stm_gpio(pin->port_no, pin->pin_no));
 }
 EXPORT_SYMBOL(stpio_free_pin);
@@ -625,6 +601,87 @@
 }
 EXPORT_SYMBOL(stpio_set_irq_type);
 
+#ifdef CONFIG_PROC_FS
+
+static struct proc_dir_entry *proc_stpio;
+
+static inline const char *stpio_get_direction_name(unsigned int direction)
+{
+	switch (direction) {
+	case STPIO_NONPIO:		return "IN  (pull-up)      ";
+	case STPIO_BIDIR:		return "BI  (open-drain)   ";
+	case STPIO_OUT:			return "OUT (push-pull)    ";
+	case STPIO_IN:			return "IN  (Hi-Z)         ";
+	case STPIO_ALT_OUT:		return "Alt-OUT (push-pull)";
+	case STPIO_ALT_BIDIR:	return "Alt-BI (open-drain)";
+	default:				return "forbidden          ";
+	}
+};
+
+static inline const char *stpio_get_handler_name(void *func)
+{
+	static char sym_name[KSYM_NAME_LEN];
+	char *modname;
+	unsigned long symbolsize, offset;
+	const char *symb;
+
+	if (func == NULL)
+		return "";
+
+	symb = kallsyms_lookup((unsigned long)func, &symbolsize, &offset,
+			&modname, sym_name);
+
+	return symb ? symb : "???";
+}
+
+static int stpio_read_proc(char *page, char **start, off_t off, int count,
+		int *eof, void *data_unused)
+{
+	int len;
+	int port_no, pin_no;
+	off_t begin = 0;
+	int num_ports = stm_gpio_num / STM_GPIO_PINS_PER_PORT;
+	struct stm_gpio_port *port;
+	struct stm_gpio_pin *pin;
+
+	len = sprintf(page, "  port      name          direction\n");
+	for (port_no = 0; port_no < num_ports; port_no++)
+	{
+		for (pin_no = 0; pin_no < STM_GPIO_PINS_PER_PORT; pin_no++) {
+
+			port = &stm_gpio_ports[port_no];
+			if(!port) continue;
+
+			pin = &port->pins[pin_no];
+			if(!pin) continue;
+
+			char *name = pin->stpio.pin_name ? pin->stpio.pin_name : "";
+			len += sprintf(page + len,
+					"PIO %d.%d [%-10s] [%s] [%s]\n",
+					port_no, pin_no, name,
+					stpio_get_direction_name(pin->direction),
+					stpio_get_handler_name(pin->stpio.func));
+
+			if (len + begin > off + count)
+				goto done;
+			if (len + begin < off) {
+				begin += len;
+				len = 0;
+			}
+		}
+	}
+
+	*eof = 1;
+
+done:
+	if (off >= len + begin)
+		return 0;
+	*start = page + (off - begin);
+	return ((count < begin + len - off) ? count : begin + len - off);
+}
+
+#endif /* CONFIG_PROC_FS */
+
 #endif /* CONFIG_STPIO */
 
 
@@ -801,6 +858,7 @@
 	struct stm_gpio_port *port = &stm_gpio_ports[port_no];
 	struct resource *memory;
 	int irq;
+	int ret;
 
 	BUG_ON(port_no < 0);
 	BUG_ON(port_no >= stm_gpio_num);
@@ -828,7 +886,11 @@
 	port->gpio_chip.label = dev_name(&pdev->dev);
 	dev_set_drvdata(&pdev->dev, port);
 
-	return 0;
+	port->sysdev.id = port_no;
+	port->sysdev.cls = &stm_gpio_sysdev_class;
+	ret = sysdev_register(&port->sysdev);
+	if (ret)
+		return ret;
 
 	/* This is a good time to check consistency of linux/stm/gpio.h
 	 * declarations with the proper source... */
@@ -920,68 +982,23 @@
 /*** Drivers initialization ***/
 
 #ifdef CONFIG_PM
-#ifdef CONFIG_HIBERNATION
-/*
- * platform_allow_pm_gpio
- * Every platform implementation of this function has to check if
- * a specific gpio_pin can be managed or not in the PM core code
- */
-int __weak platform_allow_pm_gpio(int gpio, int freezing)
-{
-	return 1;
-}
-
-static int stm_gpio_port_restore(struct stm_gpio_port *port)
+static int stm_gpio_hibernation_resume(struct stm_gpio_port *port)
 {
 	int pin_no;
 
-	for (pin_no = 0; pin_no < port->gpio_chip.ngpio; ++pin_no) {
-		struct stm_gpio_pin *pin = &port->pins[pin_no];
-
-		if (!platform_allow_pm_gpio(
-			stm_gpio(port - stm_gpio_ports, pin_no), 0))
-			continue;
+	for (pin_no = 0; pin_no < port->gpio_chip.ngpio; ++pin_no)
 		/*
-		 * Direction can not be zero! Zero means 'un-claimed'
+		 * Direction can not be zero!
+		 * Zero means 'un-claimed'
 		 */
-		if (!gpio_pm_get_direction(pin)) {
-			/*
-			 * On some chip the reset value ins't DIRECTION_IN...
-			 */
+		if (port->pins[pin_no].direction)
 			__stm_gpio_direction(port, pin_no,
-					STM_GPIO_DIRECTION_IN);
-			/* reset again to say 'un-claimed' as it was */
-			gpio_pm_set_direction(pin, 0);
-			continue;
-		}
-
-		/*
-		 * In case of Direction_Out set the Out value
-		 */
-		if (STM_GPIO_DIRECTION_OUT == gpio_pm_get_direction(pin))
-			__stm_gpio_set(port, pin_no, gpio_pm_get_value(pin));
-
-		__stm_gpio_direction(port, pin_no, gpio_pm_get_direction(pin));
+					     port->pins[pin_no].direction);
 
-	}
 	return 0;
 }
 
-static int stm_gpio_restore(void)
-{
-	int port_no, ret = 0;
-	int port_num = stm_gpio_num / STM_GPIO_PINS_PER_PORT;
-
-	for (port_no = 0; port_no < port_num; ++port_no)
-		ret |= stm_gpio_port_restore(&stm_gpio_ports[port_no]);
-
-	return ret;
-}
-#else
-#define stm_gpio_restore	NULL
-#endif
-
-static int stm_gpio_port_suspend(struct stm_gpio_port *port)
+static int stm_gpio_suspend(struct stm_gpio_port *port)
 {
 	int port_no = port - stm_gpio_ports;
 	int pin_no;
@@ -1000,38 +1017,61 @@
 	return 0;
 }
 
-static int stm_gpio_suspend(void)
+static int stm_gpio_sysdev_suspend(struct sys_device *dev, pm_message_t state)
 {
-	int port_no, ret = 0;
-	int port_num = stm_gpio_num / STM_GPIO_PINS_PER_PORT;
+	struct stm_gpio_port *port = sysdev_to_stm_gpio(dev);
+	int ret = 0;
+
+	switch (state.event) {
+	case PM_EVENT_ON:
+		if (port->pm_state.event != PM_EVENT_FREEZE)
+			break;
+		ret = stm_gpio_hibernation_resume(port);
+		break;
 
-	for (port_no = 0; port_no < port_num; ++port_no)
-		ret |= stm_gpio_port_suspend(&stm_gpio_ports[port_no]);
+	case PM_EVENT_SUSPEND:
+		ret = stm_gpio_suspend(port);
+		break;
 
-	return ret;
-}
+	case PM_EVENT_FREEZE:
+		/* do nothing */
+		break;
+	}
 
+	port->pm_state = state;
 
-static struct stm_system stm_gpio_system = {
-	.name = "gpio",
-	.priority = stm_gpio_pr,
-	.suspend = stm_gpio_suspend,
-	.freeze = stm_gpio_suspend,
-	.restore = stm_gpio_restore,
-};
+	return ret;
+}
 
-static int stm_gpio_subsystem_init(void)
+static int stm_gpio_sysdev_resume(struct sys_device *dev)
 {
-	return stm_register_system(&stm_gpio_system);
+	return stm_gpio_sysdev_suspend(dev, PMSG_ON);
 }
-
-module_init(stm_gpio_subsystem_init);
+#else
+#define stm_gpio_sysdev_suspend NULL
+#define stm_gpio_sysdev_resume NULL
 #endif
 
+static struct sysdev_class stm_gpio_sysdev_class = {
+	.name = "stm-gpio",
+	.suspend = stm_gpio_sysdev_suspend,
+	.resume = stm_gpio_sysdev_resume,
+};
+
 static int __init stm_gpio_init(void)
 {
 	int ret;
 
+#ifdef CONFIG_PROC_FS
+	proc_stpio = create_proc_entry("stpio", 0, NULL);
+	if (proc_stpio)
+		proc_stpio->read_proc = stpio_read_proc;
+#endif
+
+	ret = sysdev_class_register(&stm_gpio_sysdev_class);
+	if (ret)
+		return ret;
+
 	ret = platform_driver_register(&stm_gpio_driver);
 	if (ret)
 		return ret;
